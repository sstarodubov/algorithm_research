// tokenizer

%lex

%%
\/\/.*          return null
\/\*(.|\s)*\*\/ return null
\s+             return null 

\d+             return 'NUMBER'
\+              return "ADDITIVE_OP"
\*              return 'MULTICATIVE_OP'


\bdef\b         return "DEF"
\breturn\b      return "RETURN"
\bif\b          return "IF"
\belse\b        return "ELSE"

\w+             return "IDENTIFIER"

/lex

%{ 
  function BinaryExpression(left, op, right) {
    return {
      type: "BinaryExpresssion",
      op,
      left,
      right
    }
  }  
%}

%%

Programm 
  :StatementList {$$ = {
                        "type": "Programm",
                        "body": $1
                       }
                  }
  ;

StatementList
  : Statement {$$ = [$1]}
  | StatementList Statement {$1.push($2); $$ = $1}
  ;

Statement
  : ExpressionStatement
  | EmptyStatement
  | BlockStatement
  | FunctionDeclaration
  | ReturnStatement
  | IfStatement
  ;

IfStatement
  : IF '('  Expression ')' Statement 
  | IF '('  Expression ')' Statement ELSE Statement 
  ;

ReturnStatement
  : RETURN OptExpression ';' {$$ = {
                                  type: 'ReturnStatement',
                                  argument: $1
                               }
                             }
  ;

OptExpression
  : Expression
  | /*empty*/ {$$ = null}
  ;

FunctionDeclaration
  : DEF Identifier '(' OptFormalParamentList ')' BlockStatement {
                                                                  $$ = {
                                                                    type: "FunctionDeclaration",
                                                                    name: $2,
                                                                    params: $4,
                                                                    body: $6,
                                                                  }
                                                                }
  ;

Identifier
  : IDENTIFIER {$$ = {
        type: "Identifier",
        value: $1
      }
    }
  ;

OptFormalParamentList
  : FormalParamentList
  | /*empty */ {$$ = []}
  ;

FormalParamentList
  : Identifier  {$$ = [$1]}
  | FormalParamentList ',' Identifier {$1.push($3); $$ = $1}
  ;



BlockStatement
  : '{' OptStatementList '}' {$$ = {type: "BlockStatement", body: $2}}
  ;

OptStatementList
  : StatementList
  | /*empty*/ {$$ = []}
  ;

EmptyStatement
  : ';' {$$={"type": "EmptyStatement" }} 
  ;

ExpressionStatement
  : Expression ';' { 
                    $$ = {
                      type: "ExprassionStatement",
                      expresssion: $1 
                    }
                   }
  ;

Expression 
  : AdditiveExpression 
  ;

AdditiveExpression 
  : AdditiveExpression ADDITIVE_OP MultiplicativeExpression { $$ = BinaryExpression($1, $2, $3)}
  | MultiplicativeExpression 
  ;

 MultiplicativeExpression
  : MultiplicativeExpression MULTICATIVE_OP PrimaryExpression  { $$ =  BinaryExpression($1, $2, $3) }
  | PrimaryExpression
  ;

PrimaryExpression 
  :  Literal 
  | Identifier
  | ParenthesizedExpression  
  ;

Literal
  : NumericLiteral 
  ;

NumericLiteral 
  : NUMBER { $$ = {type: "Literal", value: $1}} 
  ;

ParenthesizedExpression
  : '(' Expression ')' { $$ = $2}
  ;
